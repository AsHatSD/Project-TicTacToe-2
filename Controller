package sample;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;

import javafx.scene.control.MenuItem;


import java.io.*;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Scanner;


public class Controller {
    @FXML
    private Button button1;
    @FXML
    private Button button2;
    @FXML
    private Button button3;
    @FXML
    private Button button4;
    @FXML
    private Button button5;
    @FXML
    private Button button6;
    @FXML
    private Button button7;
    @FXML
    private Button button8;
    @FXML
    private Button button9;
    @FXML
    private TextField textField1;
    @FXML
    private MenuItem save;
    @FXML
    private MenuItem load;
    @FXML
    private MenuItem newgame;


    public static int LISTE_PORT = 8899;
    public static final int SEND_PORT = 8898;
    private static final String IP = "127.0.0.1";
    //    private static String sendValue= "";
//    private static InetAddress IPAddress;
    public static DatagramSocket sendSocket;
    public static DatagramSocket receiveSocket;


    static Button[][] table = new Button[3][3];
    static int player1 = 0;
    static int player2 = 0;
    static int moves = 9;


    public void update() {
        table[0][0] = button1;
        table[0][1] = button2;
        table[0][2] = button3;
        table[1][0] = button4;
        table[1][1] = button5;
        table[1][2] = button6;
        table[2][0] = button7;
        table[2][1] = button8;
        table[2][2] = button9;

    }


    public int checkWin() {

        boolean win = false;

        if (table[0][0].getText().equals(table[1][1].getText()) && table[1][1].getText().equals(table[2][2].getText())
                && !table[1][1].getText().equals("")) {
            win = true;


        } else if (table[0][2].getText().equals(table[1][1].getText()) && table[1][1].getText().equals(table[2][0].getText())
                && !table[1][1].getText().equals("")) {
            win = true;
        } else {

            for (int i = 0; i < 3; i++) {
                if (table[i][0].getText().equals(table[i][1].getText()) && table[i][1].getText().equals(table[i][2].getText())
                        && !table[i][1].getText().equals("")) {
                    win = true;
                    break;
                } else if (table[0][i].getText().equals(table[1][i].getText()) && table[1][i].getText().equals(table[2][i].getText())
                        && !table[1][i].getText().equals("")) {
                    win = true;
                    break;

                }


            }

        }


        if (win) {
            if (player2 == -1) {
                textField1.setText("Winner player 1 !");

            } else if (player2 == 0) {
                textField1.setText("Winner Player 2 !");

            }


            return 1;
        } else if (moves == 0) {
            textField1.setText("It's a tie !");
            return 0;
        }


        return 0;

    }


    @FXML
    public void CLICK(ActionEvent event) throws Exception {

        sendSocket = new DatagramSocket();
        receiveSocket = new DatagramSocket(Controller.LISTE_PORT);

        if (moves != -1) {
            Object source = event.getSource();
            Button clickedButton = null;
            update();


            if (source instanceof Button) {
                clickedButton = (Button) source;
            }


            if (player1 == 0 && player2 == 0) {
                if (clickedButton != null) {
                    clickedButton.setText("X");
                    clickedButton.setDisable(true);
                }
                player2 = -1;
                moves--;
                if (checkWin() == 1) {
                    moves = -1;
                }

            } else if (player1 == 0 && player2 == -1) {
                if (clickedButton != null) {
                    clickedButton.setText("0");
                    clickedButton.setDisable(true);
                }
                player2 = 0;
                moves--;
                if (checkWin() == 1) {
                    moves = -1;
                }
            }

////////////////////////////////////////////////////////////////
            connectionMain(clickedButton);
        }

    }

////////////////////////////////////////////////////////////////

    public void save() {
        File xoSave = new File("xO.txt");
        PrintWriter writer = null;

        try {
            writer = new PrintWriter(xoSave);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        if (writer != null) {
            writer.println(moves);
            writer.println(player1);
            writer.println(player2);

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    writer.println(table[i][j].getText());
                }
            }
            writer.close();
        }
    }


    public void load() {
        update();

        Scanner file = null;

        try {
            file = new Scanner(new FileReader("xO.txt"));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        if (file != null) {
            moves = file.nextInt();
            player1 = file.nextInt();
            player2 = file.nextInt();
            file.nextLine();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    String text = file.nextLine();
                    if (text.equals("X") || text.equals("0")) {
                        table[i][j].setText(text);
                        table[i][j].setDisable(true);

                    } else {
                        table[i][j].setText("");
                        table[i][j].setDisable(false);
                    }

                }
            }

            file.close();
        }
    }


    @FXML
    public void newgame() {
        moves = 9;
        player1 = 0;
        player2 = 0;

        update();
        textField1.setText("");

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                table[i][j].setText("");
                table[i][j].setDisable(false);
            }
        }

    }

    public static void connectionMain(Button clickedButton) throws UnknownHostException {

        DatagramPacket sendPacket;
        DatagramPacket receivePacket = null;

        byte[] data;
        String msg;
        System.out.println("The button that was clicked is : " + clickedButton.getId());
        msg = clickedButton.getId();
        data = msg.getBytes();

        sendPacket = new DatagramPacket(data, data.length, InetAddress.getByName(IP), SEND_PORT);
        try {
            sendSocket.send(sendPacket);
        } catch (IOException e) {
            e.printStackTrace();
        }
        sendSocket.close();

        try {
            receivePacket = new DatagramPacket(data, data.length);

            receiveSocket.receive(receivePacket);
        } catch (IOException e) {
            e.printStackTrace();
        }
        String transmit = new String(receivePacket.getData());
        System.out.println("Received: " + transmit);
        receiveSocket.close();


        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (table[i][j].getId().equals(transmit) && !table[i][j].getText().equals(" ")) {
                    if (player1 == 0 && player2 == 0) {
                        table[i][j].setText("X");
                        table[i][j].setDisable(true);
                        player2 = -1;
                    } else if (player1 == 0 && player2 == -1) {
                        table[i][j].setText("O");
                        table[i][j].setDisable(true);
                        player2 = 0;
                    }
                }
            }
        }

    }

}
